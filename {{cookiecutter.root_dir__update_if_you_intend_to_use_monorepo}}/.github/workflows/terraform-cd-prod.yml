# This GitHub workflow deploys Terraform resources (ML resource config and more)
# defined under {{cookiecutter.project_name}}/terraform/prod, when PRs are merged into the release branch
name: Terraform Deployment for {{cookiecutter.project_name}} Prod

on:
  push:
    branches:
      - '{{cookiecutter.release_branch}}'
    paths:
      - '{{cookiecutter.project_name}}/terraform/**'
  workflow_dispatch:

defaults:
  run:
    working-directory: ./{{cookiecutter.project_name}}/terraform

jobs:
  prod:
    concurrency: {{cookiecutter.project_name}}-prod-terraform-job
    runs-on: ubuntu-20.04
    env:
      DATABRICKS_HOST: {{cookiecutter.databricks_prod_workspace_host}}
      {% if cookiecutter.cloud == "aws" -%}
      DATABRICKS_TOKEN: {% raw %}${{secrets.PROD_WORKSPACE_TOKEN}}{% endraw %}
      {%- endif %}
    steps:
      - uses: actions/checkout@v3
        {%- if cookiecutter.cloud == "azure" %}
      - name: Generate AAD Token
        {% raw %}run: ../../.github/workflows/scripts/generate-aad-token.sh ${{ secrets.prodAzureSpTenantId }} ${{ secrets.prodAzureSpApplicationId }} ${{ secrets.prodAzureSpClientSecret }}{% endraw %}
        {%- endif %}
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform -chdir=prod fmt -check
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
        {%- if cookiecutter.cloud == "azure" %}
        {% raw %}  echo "ARM_ACCESS_KEY=${{secrets.ARM_ACCESS_KEY}}" >> "$GITHUB_ENV"{% endraw %}
        {%- elif cookiecutter.cloud == "aws" %}
        {% raw %}  echo "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" >> "$GITHUB_ENV"{% endraw %}
        {% raw %}  echo "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" >> "$GITHUB_ENV"{% endraw %}
        {%- endif %}
      - name: Terraform Init
        id: init
        run: terraform -chdir=prod init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=prod validate
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=prod plan -no-color \
          -var="git_repo_url={% raw %}${{ github.server_url }}/${{ github.repository }}{% endraw %}"
      - name: Terraform Apply
        id: apply
        run: |
          terraform -chdir=prod apply -auto-approve \
          -var="git_repo_url={% raw %}${{ github.server_url }}/${{ github.repository }}{% endraw %}"
      - name: Terraform Output
        id: output
        run: terraform -chdir=prod output -json
      - name: Commit Terraform Output to File
        id: commit
        run: |
          git pull
          mkdir -p output
          echo '{% raw %}${{ steps.output.outputs.stdout }}{% endraw %}' | jq '.' > output/prod.json
          git config --global user.name 'Terraform Output Github Workflow'
          git config --global user.email '<>'
          output=$(git status --porcelain)
          if [ -n "$output" ]
          then
            git add -A
            git commit -m "Commit prod output"
            git push
            {%- if cookiecutter.default_branch != cookiecutter.release_branch %}
            git fetch origin {{cookiecutter.release_branch}}
            git checkout {{cookiecutter.release_branch}}
            git cherry-pick {{cookiecutter.default_branch}}
            git push
            {%- endif %}
          fi
